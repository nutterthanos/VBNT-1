local logger = require("transformer.logger")
local log = logger.new("rpc.system.fwupgrade.")
local os = os

local SYSTEM_FWUPGRADE_ = {
  objectType = {
    name = 'rpc.system.fwupgrade.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      state = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "None",
          "Requested",
          "Waitforswitch",
          "Complete",
          "Error",
        },
      },
      filename = {
        access = "readWrite",
        type = "string",
        max = "256",
      },
      manualswitchover = {
        access = "readWrite",
        type = "boolean",
      },
      location = {
        access = "readOnly",
        type = "string",
      },
      activebank = {
        access = "readOnly",
        type = "string",
      },
      passivebank = {
        access = "readOnly",
        type = "string",
      },
      activeversion = {
        access = "readOnly",
        type = "string",
      },
      passiveversion = {
        access = "readOnly",
        type = "string",
      },
      info = {
        access = "readOnly",
        type = "string",
      },
      errorcode = {
        access = "readOnly",
        type = "string",
      },
      banktype = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "SingleBank",
          "DualBank",
        },
      },
    }

  }
}

local banktable = require "transformer.shared.banktable"
local network = require("transformer.shared.common.network")

local fwupgrade_mapdata = {}
local fwupgrade_location = "/tmp/"
local fwupgrade_pidfile = "/var/run/sysupgrade.pid"
local fwupgrade_errfile = "/var/state/sysupgrade"
local fwupgrade_errmsg = "/var/state/sysupgrade-msg"

local nwcommon = require ("transformer.mapper.nwcommon")
local uci_helper = mapper("ucihelper")
local sys_binding = {config= "system", sectionname= "firmware", option= "stop_downgrade_from_gui"}
local version_timestamp = {config= "version", sectionname= "@version[0]", option= "timestamp", extended = true}
local sys_binding_whitelist = {config= "system", sectionname= "firmware", option= "exception"}

-- Get bank type from /proc/mtd
local function fwupgrade_get_banktype()
  local banktype = banktable.isDualBank() and "DualBank" or "SingleBank"

  fwupgrade_mapdata.banktype = banktype

  return banktype
end

-- Reset state and info
local function fwupgrade_reset()
  fwupgrade_mapdata.state = "None"
  fwupgrade_mapdata.info = ""
  fwupgrade_mapdata.errorcode = "0"
  if fwupgrade_mapdata.banktype == "DualBank" then
    fwupgrade_mapdata.manualswitchover= "0"
  end
end

local function get_upgrade_error(defaultErrCode)
  local errcode = network.getFirstLine(fwupgrade_errfile)
  errcode = errcode ~= "" and tonumber(errcode) or defaultErrCode
  local errmsg = network.getFirstLine(fwupgrade_errmsg)
  errmsg = errmsg ~= "" and errmsg or "upgrade failed"
  return errcode, errmsg
end

-- Set the error state & log it
local function fwupgrade_set_error(errcode, info)
  fwupgrade_mapdata.state = "Error"
  fwupgrade_mapdata.errorcode = tostring(errcode)
  fwupgrade_mapdata.info = info or ""
  log:error("Error: " .. info or "?")
end

-- Update the state (when trying to upgrade)
local function fwupgrade_check_for_completion()
  if fwupgrade_mapdata.state == "Requested" then
    -- Check whether the process is still running
    if os.execute("start-stop-daemon -t -K  -p " .. fwupgrade_pidfile ) ~= 0  then
      -- sysupgrade is no longer running, but Transformer is still running.  This is only possible if sysupgrade failed
      local errcode, errmsg = get_upgrade_error(255)
      fwupgrade_set_error(errcode, errmsg)
    end
  end

  if fwupgrade_mapdata.state == "Waitforswitch" then
    local errcode, errmsg = get_upgrade_error(0)
    if(errcode ~= 0) then
      fwupgrade_set_error(errcode, errmsg)
    end
  end
end

-- Perform the actual upgrade
local function fwupgrade_start()
  -- remove any lingering status file
  os.remove(fwupgrade_errfile)
  -- Make sure we have a filename
  if not fwupgrade_mapdata.filename or fwupgrade_mapdata.filename == "" then
    fwupgrade_set_error(255, "invalid filename")
    return
  end

  local filename = fwupgrade_location..fwupgrade_mapdata.filename

  -- section to restrict downgrade functionality
  -- downgrade restriction based on comparing timestamp values
  local timestamp
  local date = {}
  local sub = string.sub
  local downgrade_restrict = uci_helper.get_from_uci(sys_binding)
  local whiteList =  uci_helper.get_from_uci(sys_binding_whitelist)
  if type(whiteList) == "table" then
   whiteList = table.concat(whiteList, " ")
  end
  local build_date = uci_helper.get_from_uci(version_timestamp)
  if downgrade_restrict == "1" then
    local parser = io.popen("bli_parser "..filename)
    if parser then
      local output = parser:read("*all")
      timestamp = output:match("timestamp%:%s+(%S+)")
      parser:close()
    end
    local new_build_timestamp = nwcommon.hex2Decimal(timestamp)
    -- workaround done to solve bli_parser issue
    -- 30 year differnce in timestamp value is added to upgrade new_build_timestamp value
    new_build_timestamp = new_build_timestamp + (30 * 31556926)
    local running_build_timestamp = os.time({year = sub(build_date, 1, 4), month = sub(build_date, 5, 6), day = sub(build_date, 7, 8), hour = sub(build_date, 9, 10), min = sub(build_date, 11, 12), sec = sub(build_date, 13, 14)})
    local timestamp_diff = running_build_timestamp - new_build_timestamp
    --timestamp difference greater than timestamp value of one day(86400), upgrade is blocked
    if timestamp_diff > 86400  then
      if not whiteList:find(timestamp) then
        fwupgrade_set_error(255, "File is corrupted")
        return
      end
    end
  end

  -- Start sysupgrade in the background; normally this will restart the box after several seconds
  -- force GC to run to try to prevent lua from taking more memory during
  -- the upgrade action by having it reclaim some unused objects. This won't
  -- shrink the linux memory usage, but it might prevent it from becoming
  -- even bigger.
  collectgarbage()
  collectgarbage()
  local cmd="/usr/lib/cwmpd/transfers/rollback.sh record GUI; start-stop-daemon -m -p"
  if (fwupgrade_mapdata.banktype == "DualBank") and (fwupgrade_mapdata.manualswitchover == "1") then
    os.execute(cmd .. fwupgrade_pidfile .. " -b -x sysupgrade-safe -S  -- -o --gui "  .. filename)
    fwupgrade_mapdata.state = "Waitforswitch"
  else
    os.execute(cmd .. fwupgrade_pidfile .. " -b -x sysupgrade-safe -S  --  --gui "  .. filename)
  end
end

-- Getall implementation
SYSTEM_FWUPGRADE_.getall = function(mapping, key)
  fwupgrade_check_for_completion()

  return {
    state = fwupgrade_mapdata.state or "None",
    filename = fwupgrade_mapdata.filename or "",
    location = fwupgrade_location,
    info = fwupgrade_mapdata.info or "",
    errorcode = fwupgrade_mapdata.errorcode or "255",
    banktype = fwupgrade_mapdata.banktype or ""
  }
end


-- Get implementation
SYSTEM_FWUPGRADE_.get = {
  state = function(mapping, param)
    fwupgrade_check_for_completion()
    return fwupgrade_mapdata.state or "None"
  end,
  filename = function(mapping, param)
    return fwupgrade_mapdata.filename or ""
  end,
  manualswitchover = function(mapping, param)
    return fwupgrade_mapdata.manualswitchover or "0"
  end,
  location = fwupgrade_location,
  info = function(mapping, param)
    fwupgrade_check_for_completion()
    return fwupgrade_mapdata.info or ""
  end,
  errorcode = function(mapping, param)
    fwupgrade_check_for_completion()
    return fwupgrade_mapdata.errorcode or "255"
  end,
  activebank = function(mapping, param)
    return banktable.getCurrentBank()
  end,
  passivebank = function(mapping, param)
    return banktable.getOtherBank() or ""
  end,
  activeversion = function(mapping, param)
    return banktable.getCurrentVersion()
  end,
  passiveversion = function(mapping, param)
    return banktable.getOtherVersion()
  end,
  banktype = function(mapping, param)
    return fwupgrade_mapdata.banktype or ""
  end,
}

-- Set implementation
SYSTEM_FWUPGRADE_.set = {
  manualswitchover = function(mapping, param, value)
  fwupgrade_mapdata.manualswitchover = value
  end,

  state = function(mapping, param, value)
    if value ~= "Requested" then
      return nil, "invalid value"
    end
-- If the sysupgrade is already in progress, silently ignore new requests
  if fwupgrade_mapdata.state ~= "Requested" then
       local switch
       if (fwupgrade_mapdata.banktype == "DualBank") then
         switch = fwupgrade_mapdata.manualswitchover
       end
       fwupgrade_reset()
       if (fwupgrade_mapdata.banktype == "DualBank") then
         fwupgrade_mapdata.manualswitchover = switch
       end
       fwupgrade_mapdata.state = "Requested"
       fwupgrade_start()
    end
  end,

  filename = function(mapping, param, value)
    -- filename is relative and without subdirectories
    if string.find(value, "/") then
      return nil, "invalid value"
    end

    -- If sysupgrade is already busy, we don't want any changes
    if fwupgrade_mapdata.state == "Requested" then
      return nil, "invalid state"
    end
    fwupgrade_reset()
    fwupgrade_mapdata.filename = value
  end,
}

-- Hide the five parameters for single bank boards
if fwupgrade_get_banktype() == "SingleBank" then
  SYSTEM_FWUPGRADE_.objectType.parameters.manualswitchover = nil
  SYSTEM_FWUPGRADE_.objectType.parameters.activebank = nil
  SYSTEM_FWUPGRADE_.objectType.parameters.passivebank = nil
  SYSTEM_FWUPGRADE_.objectType.parameters.activeversion = nil
  SYSTEM_FWUPGRADE_.objectType.parameters.passiveversion = nil
  SYSTEM_FWUPGRADE_.get.manualswitchover = nil
  SYSTEM_FWUPGRADE_.get.activebank = nil
  SYSTEM_FWUPGRADE_.get.passivebank = nil
  SYSTEM_FWUPGRADE_.get.activeversion = nil
  SYSTEM_FWUPGRADE_.get.passiveversion = nil
  SYSTEM_FWUPGRADE_.set.manualswitchover = nil
end

register(SYSTEM_FWUPGRADE_)
